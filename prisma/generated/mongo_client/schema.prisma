// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/mongo_client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Users {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userName    String
  email       String
  imageUrl    String
  createdAt   DateTime
  updatedAt   DateTime
  trackList   Tracks[]
  libraryList String[]
  usersId     String?     @db.ObjectId
  PlayList    PlayLists[]
  followersId String[]    @db.ObjectId
  followers   Followers[] @relation(fields: [followersId], references: [id])
}

model Followers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  usersId   String[] @db.ObjectId
  followers Users[]  @relation(fields: [usersId], references: [id])
}

model Artists {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  genres     String[]
  imageUrl   String
  popularity Int
  albumsId   String[] @db.ObjectId
  albums     Albums[] @relation(fields: [albumsId], references: [id])
  listType   String
  Tracks     Tracks?  @relation(fields: [tracksId], references: [id])
  tracksId   String?  @db.ObjectId
}

model Albums {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  genres     String[]
  imageUrl   String
  popularity Int
  artistId   String[]  @db.ObjectId
  artists    Artists[] @relation(fields: [artistId], references: [id])
  tracks     Tracks[]
  listType   String
}

model PlayLists {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageUrl    String
  tracks      Tracks[]
  description String
  owner       Users    @relation(fields: [usersId], references: [id])
  private     Boolean
  listType    String
  createdAt   DateTime
  updatedAt   DateTime
  usersId     String   @db.ObjectId
}

model Genres {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  imageUrl String
  tracksId String[] @db.ObjectId
  tracks   Tracks[] @relation(fields: [tracksId], references: [id])
  color    String
}

model Tracks {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  artists    Artists[]
  likes      Int
  genresId   String[]   @db.ObjectId
  genres     Genres[]   @relation(fields: [genresId], references: [id])
  audioUrl   String
  verified   Boolean
  duration   Int
  imageId    String
  audioId    String
  Users      Users?     @relation(fields: [usersId], references: [id])
  usersId    String?    @db.ObjectId
  Albums     Albums?    @relation(fields: [albumsId], references: [id])
  albumsId   String?    @db.ObjectId
  PlayList   PlayLists? @relation(fields: [playListId], references: [id])
  playListId String?    @db.ObjectId
}
